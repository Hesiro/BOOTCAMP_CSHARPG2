// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Relation_FluentApi.Data;

#nullable disable

namespace Relation_FluentApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materia");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.PersonBusiness", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "BusinessId");

                    b.HasIndex("BusinessId");

                    b.ToTable("PersonBusiness");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.StudentMateria", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "MateriaId");

                    b.HasIndex("MateriaId");

                    b.ToTable("StudentMateria");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToMany.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToMany.Pattient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Pattient");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.CarCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarCompany");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarCompanyId")
                        .IsUnique();

                    b.ToTable("CarModel");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.PersonBusiness", b =>
                {
                    b.HasOne("Relation_FluentApi.Models.ManyToMany.Business", "Business")
                        .WithMany("PersonsBusiness")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Relation_FluentApi.Models.ManyToMany.Person", "Person")
                        .WithMany("PersonsBusiness")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.StudentMateria", b =>
                {
                    b.HasOne("Relation_FluentApi.Models.ManyToMany.Materia", "Materia")
                        .WithMany("StudentsMaterias")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Relation_FluentApi.Models.ManyToMany.Student", "Student")
                        .WithMany("StudentsMaterias")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Materia");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToMany.Pattient", b =>
                {
                    b.HasOne("Relation_FluentApi.Models.OneToMany.Doctor", "Doctor")
                        .WithMany("Pattients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.CarModel", b =>
                {
                    b.HasOne("Relation_FluentApi.Models.OneToOne.CarCompany", "CarCompany")
                        .WithOne("CarModel")
                        .HasForeignKey("Relation_FluentApi.Models.OneToOne.CarModel", "CarCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarCompany");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.EmployeeAddress", b =>
                {
                    b.HasOne("Relation_FluentApi.Models.OneToOne.Employee", "Employee")
                        .WithOne("EmployeeAddress")
                        .HasForeignKey("Relation_FluentApi.Models.OneToOne.EmployeeAddress", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Business", b =>
                {
                    b.Navigation("PersonsBusiness");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Materia", b =>
                {
                    b.Navigation("StudentsMaterias");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Person", b =>
                {
                    b.Navigation("PersonsBusiness");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.ManyToMany.Student", b =>
                {
                    b.Navigation("StudentsMaterias");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToMany.Doctor", b =>
                {
                    b.Navigation("Pattients");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.CarCompany", b =>
                {
                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("Relation_FluentApi.Models.OneToOne.Employee", b =>
                {
                    b.Navigation("EmployeeAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
